import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import {
  Grid,
  Divider,
  Container,
  Snackbar,
  LinearProgress,
  Backdrop,
  CircularProgress,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { Options } from '../utils/formInterface';
import { getEnv, getHeaders } from '../utils/EnvConfig';
import { config } from '../utils/config';
import { ApplyButton } from '../CostFactors/CustomApplyButton';
import LoadingRates from './LoadingRates';
import RatesTable from './RatesTable';
import AddRateModal from './AddRateModal';
import AutocompleteSelect from './AutocompleteSelect';
import PaginationComponent from './TablePagination';
import IconButton from '@mui/material/IconButton';
import CloseIcon from '@mui/icons-material/Close';
import { getEnvironmentInfo } from '../environments/auth.service';

interface FilterData {
  links: Array<{
    link_name: string;
    data: Array<{
      value: number | string;
      label: string;
    }>;
  }>;
}

interface SelectedValues {
  purchaseCompany: string;
  expenseType: string;
  expenseParameter: string;
  transportMode: string;
  containerType: string;
  loadingPort: string;
  destinationPort: string;
  entryPort: string;
  supplier9dvn: string;
  agentOffice: string;
  port: string;
  destination: string;
  department: string;
  container: string;
  country: string;
  taxCategory: string;
  importCountry: string;
  originCountry: string;
}

interface DropdownConfig {
  displayLabel: string;
  name: keyof SelectedValues;
}

interface FilterValues {
  market_id: string;
  element_id: string;
  element_subtype_id: string;
  loading_port_id: string;
  entry_port_id: string;
  transport_mode: string;
  container_type_id: string;
  destination_port_id: string;
  supplier9dvn_id: string;
  agent_office_id: string;
  port_id: string;
  destination_id: string;
  department_id: string;
  container_id: string;
  country_id: string;
  tax_category_id: string;
  import_country_id: string;
  origin_country_id: string;
}

interface LinkOptions {
  [key: string]: any[];
}

type OptionType = {
  value: string;
  label: string;
};

interface RateData {
  per_uom_code: string;
  rate_type: string;
  currency_code: string;
  termination_date: string;
  rate_value: number;
  effective_date: string;
}

const StyledContainer = styled(Container)({
  backgroundColor: 'rgba(255, 255, 255, 1)',
  boxShadow:
    '0px 1px 2px 1px rgba(0, 0, 0, 0.15), 0px -1px 2px 0px rgba(0, 0, 0, 0.1)',
  border: '1px solid lightGrey',
  borderRadius: '8px',
  paddingTop: '5px',
  maxWidth: '100%',
});

export default function CostFactors() {
  const [showAddRateModal, setShowAddRateModal] = useState(false);
  const [filterData, setFilterData] = useState<FilterData>({ links: [] });
  const [isFetching, setIsFetching] = useState(false);
  let env: {
    [x: string]: string;
    headers: any;
  };
  const [purchaseCompanyOptions, setPurchaseCompanyOptions] = useState<
    Options[]
  >([]);
  const [expenseTypeOptions, setExpenseTypeOptions] = useState<
    { value: any; label: string }[]
  >([]);
  const [expenseParameterOptions, setExpenseParameterOptions] = useState([]);
  const [dropdownConfigs, setDropdownConfigs] = useState<DropdownConfig[]>([]);
  const [linkOptions, setLinkOptions] = useState<LinkOptions>({});
  const [startIndex, setStartIndex] = useState(0);
  const [endIndex, setEndIndex] = useState(5);
  const [pageRatesData, setPageRatesData] = React.useState(0);
  const [isLoadingApi, setIsLoadingApi] = useState<boolean>(false);
  const [rowsPerPageRatesData, setRowsPerPageRatesData] = React.useState(5);
  const [gotoPageRatesData, setGotoPageRatesData] = React.useState('');
  const [ratesData, setRatesData] = useState<RateData[]>([]);
  const [selectedRateData, setSelectedRateData] = useState<RateData[]>([]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage] = useState('');
  const [activeRateData, setActiveRateData] = useState<RateData[]>([]);
  const [refreshRates, setRefreshRates] = useState(false);
  const [allRatesData, setAllRatesData] = useState([]);
  const [uploadedRates] = useState([]);
  const [progress] = useState(0);
  const [, setForceUpdate] = useState(0);
  const [selectedValues, setSelectedValues] = useState<SelectedValues>({
    purchaseCompany: '',
    expenseType: '',
    expenseParameter: '',
    transportMode: '',
    containerType: '',
    loadingPort: '',
    destinationPort: '',
    entryPort: '',
    supplier9dvn: '',
    agentOffice: '',
    port: '',
    destination: '',
    department: '',
    container: '',
    country: '',
    taxCategory: '',
    importCountry: '',
    originCountry: '',
  });
  const [allSelectsPopulated, setAllSelectsPopulated] =
    useState<boolean>(false);

  const market: { label: string; options: Options[] } = {
    label: 'Purchase Company',
    options: [
      { value: '1001', label: '1001 - WAL-MART INC. USA' },
      { value: '1003', label: '1003 - CMA MEXICO - WBSV' },
    ],
  };

  const environment = getEnvironmentInfo();

  useEffect(() => {
    console.log(selectedRateData);
  });

  const filterValues: FilterValues = {
    market_id: selectedValues.purchaseCompany,
    element_id: selectedValues.expenseType,
    element_subtype_id: selectedValues.expenseParameter,
    loading_port_id: selectedValues.loadingPort,
    entry_port_id: selectedValues.entryPort,
    transport_mode: selectedValues.transportMode,
    container_type_id: selectedValues.container,
    destination_port_id: selectedValues.destinationPort,
    supplier9dvn_id: selectedValues.supplier9dvn,
    agent_office_id: selectedValues.agentOffice,
    port_id: selectedValues.port,
    destination_id: selectedValues.destination,
    department_id: selectedValues.department,
    container_id: selectedValues.container,
    country_id: selectedValues.country,
    tax_category_id: selectedValues.taxCategory,
    import_country_id: selectedValues.importCountry,
    origin_country_id: selectedValues.originCountry,
  };

  function isExpiringSoon(expirationDate: string): boolean {
    const today = new Date();
    const oneMonthLater = new Date(today);
    oneMonthLater.setMonth(today.getMonth() + 1);

    const rateExpirationDate = new Date(expirationDate);
    return rateExpirationDate >= oneMonthLater;
  }

  useEffect(() => {
    env = getEnv(config);
  });

  const handleSelectChange = (
    event: { target: { value: any } },
    fieldName: string
  ) => {
    const newValue = event ? event.target.value : '';

    setSelectedValues((prevSelectedValues) => {
      const updatedValues = { ...prevSelectedValues, [fieldName]: newValue };

      if (fieldName === 'purchaseCompany') {
        if (newValue) {
          setIsLoadingApi(true);
          updatedValues.expenseType = '';
          updatedValues.expenseParameter = '';
          dropdownConfigs.forEach((config) => {
            if (prevSelectedValues[config.name]) {
              updatedValues[config.name] = '';
            }
          });
        } else {
          setIsLoadingApi(false);
          setExpenseTypeOptions([]);
          setExpenseParameterOptions([]);
        }
      } else if (fieldName === 'expenseType') {
        updatedValues.expenseParameter = '';
        dropdownConfigs.forEach((config) => {
          if (prevSelectedValues[config.name]) {
            updatedValues[config.name] = '';
          }
        });
      }

      return updatedValues;
    });
  };

  const areAll3SelectsPopulated =
    selectedValues.purchaseCompany &&
    selectedValues.expenseType &&
    selectedValues.expenseParameter;

  const handleSnackbarClose = (event: any, reason: any) => {
    setSnackbarOpen(false);
  };

  useEffect(() => {
    const areInitialSelectsPopulated =
      selectedValues.purchaseCompany &&
      selectedValues.expenseType &&
      selectedValues.expenseParameter;

    const areDynamicSelectsPopulated = dropdownConfigs.every(
      (config) => selectedValues[config.name]
    );

    setAllSelectsPopulated(
      areInitialSelectsPopulated && areDynamicSelectsPopulated ? true : false
    );
  }, [dropdownConfigs, selectedValues]);

  useEffect(() => {
    if (selectedValues.purchaseCompany) {
      fetchFilters();
    }
  }, [selectedValues.purchaseCompany]);

  async function fetchFilters() {
    const headers = getHeaders(env);

    try {
      const { data } = await axios.get(
        `${environment.gstCostApiBaseUrl}/ratemgmt/filters`,
        {
          params: {
            market_id: selectedValues.purchaseCompany,
          },
          headers: headers,
        }
      );
      setFilterData(data);
    } catch (error) {
      console.error('Error trying to fetch filters:', error);
    } finally {
      setTimeout(() => {
        setIsLoadingApi(false);
      }, 1500);
    }
  }

  const isRateActive = (rate: { termination_date: string | number | Date }) => {
    const today = new Date();
    const terminationDate = new Date(rate.termination_date);
    return terminationDate >= today;
  };

  async function fetchRates(
    filterValues: {
      market_id: string;
      element_id: string;
      element_subtype_id: string;
      loading_port_id: string;
      entry_port_id: string;
      transport_mode: string;
      container_type_id: string;
      destination_port_id: string;
      supplier9dvn_id: string;
      agent_office_id: string;
      port_id: string;
      destination_id: string;
      department_id: string;
      container_id: string;
      country_id: string;
      tax_category_id: string;
      import_country_id: string;
      origin_country_id: string;
    },
    fetchAll = false
  ) {
    setIsFetching(true);
    if (!allSelectsPopulated) {
      return;
    }
    const headers = getHeaders(env);
    const payload: FilterValues = { ...filterValues };
    const filteredPayload: Partial<FilterValues> = {};
    Object.entries(payload).forEach(([key, value]) => {
      if (value !== '') {
        filteredPayload[key as keyof FilterValues] =
          value as FilterValues[keyof FilterValues];
      }
    });

    try {
      const { data } = await axios.post(
        `${environment.gstCostApiBaseUrl}/ratemgmt/rates/getratelist`,
        payload,
        { headers }
      );
      setAllRatesData(data.data);
      const activeRates = data.data.filter((rate: any) => isRateActive(rate));
      setRatesData(activeRates);
      setRefreshRates(false);
    } catch (error) {
      console.error('Error fetching rates:', error);
    } finally {
      setIsFetching(false);
    }
  }

  function hasExpired(expirationDate: string): boolean {
    const currentDate = new Date();
    const rateExpirationDate = new Date(expirationDate);
    return rateExpirationDate < currentDate;
  }

  const handleAddRateSuccess = (newRate: any) => {
    if (!refreshRates) {
      setRefreshRates(true);
    }
  };

  const handleEditRateSuccess = (newRate: any) => {
    setRefreshRates(true);
    setForceUpdate((prev) => prev + 1);
  };

  const getDropdownsConfig = (selectedValues: any, filterData: any): any[] => {
    const { expenseType, expenseParameter } = selectedValues;

    if (!filterData || !filterData.elements) {
      return [];
    }

    const selectedExpense = filterData.elements.find(
      (el: any) => el.element_id === expenseType
    );

    if (!selectedExpense || !selectedExpense.factors) {
      return [];
    }

    const selectedFactor = selectedExpense.factors.find(
      (f: any) => f.subtype_id === expenseParameter
    );

    if (!selectedFactor || !selectedFactor.filters) {
      return [];
    }

    return selectedFactor.filters;
  };

  type DropdownToApiLinkMap = {
    [key: string]: string;
  };

  const dropdownToApiLinkMap: DropdownToApiLinkMap = {
    loadingPort: 'port',
    originCountry: 'country',
    entryPort: 'port',
    importCountry: 'country',
    destination: 'port',
  };
  const getOptionsForDropdown = (dropdownName: string) => {
    const apiLinkName = dropdownToApiLinkMap[dropdownName] || dropdownName;
    return linkOptions[apiLinkName] || [];
  };

  const handleChangePageRatesData = (
    event: any,
    newPage: React.SetStateAction<number>
  ) => {
    setPageRatesData(newPage);
  };

  const handleChangeRowsPerPageRatesData = (event: {
    target: { value: string | number };
  }) => {
    setRowsPerPageRatesData(+event.target.value);
    setPageRatesData(0);
  };

  const handlePaginationChangeRatesData = (event: any, value: number) => {
    setPageRatesData(value - 1);
  };

  const handleGotoPageChangeRatesData = (event: {
    target: { value: React.SetStateAction<string> };
  }) => {
    setGotoPageRatesData(event.target.value);
  };

  const handleKeyDown = (event: {
    key: string;
    preventDefault: () => void;
  }) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      jumpToPageRatesData();
    }
  };

  const gotoPageInputRef = useRef<HTMLInputElement | null>(null);

  const jumpToPageRatesData = () => {
    const pageNumber = +gotoPageRatesData - 1;
    setPageRatesData(pageNumber);
    setGotoPageRatesData('');
  };

  async function deleteRate(effectiveDate: any) {
    const isConfirmed = window.confirm(
      'Are you sure you want to delete this rate?'
    );
    if (!isConfirmed) {
      return;
    }
    const deletePayload = {
      ...filterValues,
      effective_date: effectiveDate,
    };
    const filteredPayload: Partial<FilterValues> = {};
    Object.entries(deletePayload).forEach(([key, value]) => {
      if (value !== '') {
        filteredPayload[key as keyof FilterValues] =
          value as FilterValues[keyof FilterValues];
      }
    });
    const headers = getHeaders(env);
    try {
      await axios.delete(
        `${environment.gstCostApiBaseUrl}/ratemgmt/rates/rate`,
        {
          headers: headers,
          data: deletePayload,
        }
      );
      window.alert('Rate deleted!');
      console.log('Rate deleted successfully');
      fetchRates(filterValues);
    } catch (error) {
      console.error('Error deleting rate:', error);
    }
  }

  const allData = [...allRatesData, ...uploadedRates];

  useEffect(() => {
    const start = pageRatesData * rowsPerPageRatesData;
    const end = start + rowsPerPageRatesData;
    setStartIndex(start);
    setEndIndex(end);
  }, [pageRatesData, rowsPerPageRatesData]);

  useEffect(() => {
    if (gotoPageInputRef.current) {
      gotoPageInputRef.current.focus();
    }
  }, [gotoPageRatesData]);

  useEffect(() => {
    const configs = getDropdownsConfig(selectedValues, filterData);
    setDropdownConfigs(configs);
  }, [selectedValues, filterData]);

  useEffect(() => {
    setPurchaseCompanyOptions(market.options);
  }, []);

  useEffect(() => {
    const dataWithElements = filterData as { elements?: any[] };
    if (dataWithElements && dataWithElements.elements) {
      const types = dataWithElements.elements.map((el) => ({
        value: el.element_id,
        label: `${el.element_id} - ${el.element_name}`,
      }));
      setExpenseTypeOptions(types);
    }
  }, [filterData]);

  useEffect(() => {
    const dataWithElements = filterData as { elements?: any[] };
    if (dataWithElements?.elements && selectedValues.expenseType) {
      const selectedExpense = dataWithElements.elements.find(
        (el) => el.element_id === selectedValues.expenseType
      );
      if (selectedExpense && selectedExpense.factors) {
        const parameters = selectedExpense.factors.map(
          (f: { subtype_id: any; subtype_name: any }) => ({
            value: f.subtype_id,
            label: `${f.subtype_id} - ${f.subtype_name}`,
          })
        );
        setExpenseParameterOptions(parameters);
      } else {
        setExpenseParameterOptions([]);
      }
    }
  }, [filterData, selectedValues.expenseType]);

  useEffect(() => {
    if (filterData && filterData.links) {
      const tempLinkOptions: { [key: string]: Options[] } = {};

      filterData.links.forEach((link) => {
        tempLinkOptions[link.link_name] = link.data.map((item) => ({
          value: String(item.value),
          label: item.label,
        }));
      });

      setLinkOptions(tempLinkOptions);
    }
  }, [filterData]);
  const lastFetchedFiltersRef = useRef({});

  useEffect(() => {
    const allSelectsFilled =
      selectedValues.purchaseCompany &&
      selectedValues.expenseType &&
      selectedValues.expenseParameter &&
      dropdownConfigs.every((config) => selectedValues[config.name]);

    const currentFilterValues = JSON.stringify(filterValues);
    const lastFetchedFilterValues = lastFetchedFiltersRef.current;

    if (allSelectsFilled && currentFilterValues !== lastFetchedFilterValues) {
      setIsFetching(true);
      fetchRates(filterValues)
        .then(() => {
          lastFetchedFiltersRef.current = currentFilterValues;
        })
        .catch((error) => {
          console.error('Error fetching rates:', error);
        })
        .finally(() => {
          setTimeout(() => {
            setIsFetching(false);
          }, 2000);
        });
    }
  }, [selectedValues, dropdownConfigs, filterValues]);

  useEffect(() => {
    if (refreshRates) {
      fetchRates(filterValues);
      setRefreshRates(false);
    }
  }, [refreshRates, filterValues]);

  return (
    <div style={{ height: '100vh', overflowY: 'auto', marginTop: '15px' }}>
      <>
        {progress > 0 && (
          <LinearProgress variant="determinate" value={progress} />
        )}
        <div>
          <Divider></Divider>
        </div>
        <div style={{ position: 'relative', zIndex: '1', marginTop: '5%' }}>
          <Grid container spacing={2} alignItems="center" direction="row">
            <AutocompleteSelect
              label="Purchase company"
              options={purchaseCompanyOptions as OptionType[]}
              selectedValue={selectedValues.purchaseCompany}
              onChange={handleSelectChange}
              name="purchaseCompany"
            />
            <AutocompleteSelect
              label="Element"
              options={expenseTypeOptions}
              selectedValue={selectedValues.expenseType}
              onChange={handleSelectChange}
              name="expenseType"
            />
            <AutocompleteSelect
              label="Factor"
              options={expenseParameterOptions}
              selectedValue={selectedValues.expenseParameter}
              onChange={handleSelectChange}
              name="expenseParameter"
            />
          </Grid>
          {areAll3SelectsPopulated && (
            <>
              <Grid container spacing={2} direction="row">
                {dropdownConfigs.map((config, index) => (
                  <AutocompleteSelect
                    key={config.name}
                    label={config.displayLabel}
                    options={getOptionsForDropdown(config.name)}
                    selectedValue={selectedValues[config.name]}
                    onChange={handleSelectChange}
                    name={config.name}
                  />
                ))}
              </Grid>
            </>
          )}
          <Divider style={{ margin: '24px 0px' }}></Divider>
          {allSelectsPopulated ? (
            <>
              <StyledContainer
                style={{
                  width: '100%',
                  maxHeight: '1200px',
                  overflowY: 'auto',
                }}
              >
                {ratesData
                  .filter((data) => !hasExpired(data.termination_date))
                  .slice(startIndex, endIndex)
                  .map((data, index) => (
                    <RatesTable
                      key={index}
                      isSecondTable={index >= 1}
                      isFuture={isExpiringSoon(data.termination_date)}
                      rateValue={data.rate_value}
                      effectiveDate={data.effective_date}
                      expirationDate={data.termination_date}
                      currency={data.currency_code}
                      rateType={data.rate_type}
                      rateBasis={data.per_uom_code}
                      ratesData={allData}
                      filterData={filterData}
                      selectedValues={selectedValues}
                      onDeleteRate={deleteRate}
                      onHistoryClick={() => {
                        const allData = [...allRatesData, ...uploadedRates];
                        setSelectedRateData(allData);
                      }}
                      onEditRateSuccess={handleEditRateSuccess}
                    />
                  ))}
                <Divider></Divider>
                <div
                  style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                  }}
                >
                  <PaginationComponent
                    dataLength={ratesData.length}
                    page={pageRatesData}
                    rowsPerPage={rowsPerPageRatesData}
                    handleChangePage={handleChangePageRatesData}
                    handleChangeRowsPerPage={handleChangeRowsPerPageRatesData}
                    handlePaginationChange={handlePaginationChangeRatesData}
                    gotoPage={gotoPageRatesData}
                    onKeyDown={handleKeyDown}
                    handleGotoPageChange={handleGotoPageChangeRatesData}
                    jumpToPage={jumpToPageRatesData}
                  />
                </div>
              </StyledContainer>
              <div style={{ marginTop: '24px' }}>
                <ApplyButton
                  onClick={() => {
                    setShowAddRateModal(true);
                    setActiveRateData(ratesData);
                  }}
                >
                  Add Rate
                </ApplyButton>
              </div>
            </>
          ) : (
            <>
              <StyledContainer style={{ width: '100%' }}>
                <LoadingRates />
              </StyledContainer>
            </>
          )}
          {showAddRateModal && activeRateData && (
            <AddRateModal
              open={showAddRateModal}
              onClose={() => {
                setShowAddRateModal(false);
              }}
              rateValue={activeRateData[0]?.rate_value}
              effectiveDate={activeRateData[0]?.effective_date || ''}
              expirationDate={activeRateData[0]?.termination_date || ''}
              currency={activeRateData[0]?.currency_code || ''}
              rateType={activeRateData[0]?.rate_type || ''}
              rateBasis={activeRateData[0]?.per_uom_code || ''}
              ratesData={ratesData}
              onAddRateClick={(data) => {
                const updatedData = [
                  ...ratesData,
                  {
                    rate_value: data.rateValue,
                    effective_date: data.effectiveDate,
                    termination_date: data.expirationDate,
                    currency_code: data.currency,
                    rate_type: data.rateType,
                    per_uom_code: data.rateBasis,
                  },
                ];
                setSelectedRateData(updatedData);
                handleAddRateSuccess(updatedData);
              }}
              selectedValues={selectedValues}
              onAddRateSuccess={handleAddRateSuccess}
            />
          )}
        </div>
        <Snackbar
          open={snackbarOpen}
          autoHideDuration={6000}
          onClose={handleSnackbarClose}
          message={snackbarMessage}
          action={
            <IconButton
              size="small"
              aria-label="close"
              color="inherit"
              onClick={() => setSnackbarOpen(false)}
            >
              <CloseIcon fontSize="small" />
            </IconButton>
          }
        />
        {isLoadingApi && (
          <Backdrop
            sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
            open={isLoadingApi}
          >
            <CircularProgress color="inherit" />
          </Backdrop>
        )}
        <Backdrop
          sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
          open={isFetching}
        >
          <CircularProgress color="inherit" />
        </Backdrop>
      </>
    </div>
  );
}
